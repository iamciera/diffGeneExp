```
###Subseting for GO analysis
Specify the column you are interested in `pat$all` refers to all the DE gene regardless if they are up or down regulated. If you want to specify down regulated, specify `pat$down`.
```{r}
genes = as.integer(pat$down)
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
```
Here is where you can specify the p-value cut-off
```{r}
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
q
dffgd
>
sf
quit
35rtegr
weqr3
1`12\
wuit
---
sdfadmmm
>sdf
sigOnly <- read.csv("wtaother_wtcother_DE.csv") #change this
source('~/.active-rstudio-document', echo=TRUE)
write.table(t, file="DE1_sigonly_wtaother_wtcother_down_GOmerge.txt") #change this
genes = as.integer(pat$up)
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
```
Here is where you can specify the p-value cut-off
```{r}
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
```
write.table(t, file="DE1_sigonly_wtaother_wtcother_up_GOmerge.txt") #change this
genes = as.integer(pat$all)
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
```
Here is where you can specify the p-value cut-off
```{r}
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
```
write.table(t, file="DE1_sigonly_wtaother_wtcother_all_GOmerge.txt") #change this
sigOnly <- read.csv("wtbmbr_wtbother_DE1.csv") #change this
setwd("~/Dropbox/GO_enrichment/wtbmbr_wtbother")
sigOnly <- read.csv("wtbmbr_wtbother_DE1.csv") #change this
head(sigOnly)
dim(sigOnly)
colnames(sigOnly)[1] <- "itag"
colnames(sigOnly)
source('~/.active-rstudio-document', echo=TRUE)
sigOnly <- read.csv("wtbmbr_wtbother_DE1.csv") #change this
setwd("~/Dropbox/GO_enrichment/wtbmbr_wtbother")
source('~/.active-rstudio-document', echo=TRUE)
write.table(t, file="DE1_sigonly_wtbmbr_wtbother_all_GOmerge.txt") #change this
genes = as.integer(pat$down)
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
```
Here is where you can specify the p-value cut-off
```{r}
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
```
write.table(t, file="DE1_sigonly_wtbmbr_wtbother_down_GOmerge.txt") #change this
genes = as.integer(pat$up)
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
```
Here is where you can specify the p-value cut-off
```{r}
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
```
write.table(t, file="DE1_sigonly_wtbmbr_wtbother_up_GOmerge.txt") #change this
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Dropbox/GO_enrichment/wtbmbr_wtcmbr")
source('~/.active-rstudio-document', echo=TRUE)
write.table(t, file="DE1_sigonly_wtbmbr_wtcmbr_up_GOmerge.txt") #change this
genes = as.integer(pat$down)
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
```
Here is where you can specify the p-value cut-off
```{r}
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
```
write.table(t, file="DE1_sigonly_wtbmbr_wtcmbr_down_GOmerge.txt") #change this
genes = as.integer(pat$all)
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
```
Here is where you can specify the p-value cut-off
```{r}
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
```
write.table(t, file="DE1_sigonly_wtbmbr_wtcmbr_all_GOmerge.txt") #change this
sigOnly <- read.csv("wtbother_wtcother_DE.csv") #change this
setwd("~/Dropbox/GO_enrichment/wtbother_wtcother")
sigOnly <- read.csv("wtbother_wtcother_DE.csv") #change this
head(sigOnly)
dim(sigOnly)
colnames(sigOnly)
source('~/.active-rstudio-document', echo=TRUE)
sigOnly <- read.csv("wtbother_wtcother_DE.csv") #change this
head(sigOnly)
dim(sigOnly)
source('~/.active-rstudio-document', echo=TRUE)
sigOnly <- read.csv("wtbother_wtcother_DE.csv") #change this
source('~/.active-rstudio-document', echo=TRUE)
write.table(t, file="DE1_sigonly_wtbother_wtcother_all_GOmerge.txt") #change this
```{r}
genes = as.integer(pat$up)
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
```
Here is where you can specify the p-value cut-off
```{r}
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
```
write.table(t, file="DE1_sigonly_wtbother_wtcother_up_GOmerge.txt") #change this
genes = as.integer(pat$down)
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
```
Here is where you can specify the p-value cut-off
```{r}
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
```
write.table(t, file="DE1_sigonly_wtbother_wtcother_down_GOmerge.txt") #change this
write.table(t, file="DE1_sigonlywtcmbr_wtcother_down_GOmerge.txt") #change this
sigOnly <- read.csv("wtcmbr_wtcother_DE.csv") #change this
setwd("~/Dropbox/GO_enrichment/wtcmbr_wtcother")
sigOnly <- read.csv("wtcmbr_wtcother_DE.csv") #change this
source('~/.active-rstudio-document', echo=TRUE)
write.table(t, file="DE1_sigonly_wtcmbr_wtcother_down_GOmerge.txt") #change this
genes = as.integer(pat$up)
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
```
Here is where you can specify the p-value cut-off
```{r}
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
```
write.table(t, file="DE1_sigonly_wtcmbr_wtcother_up_GOmerge.txt") #change this
genes = as.integer(pat$all)
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
```
Here is where you can specify the p-value cut-off
```{r}
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
```
write.table(t, file="DE1_sigonly_wtcmbr_wtcother_all_GOmerge.txt") #change this
setwd("~/Dropbox/diffGeneExp/wtambr_wtaother")
library(rmarkdown)
render("wtambr_wtaother.Rmd", "pdf_document")
setwd("~/Dropbox/GO_enrichment/wtbmbr_wtbother")
render("wtbmbr_wtbother.Rmd", "pdf_document")
setwd("~/Dropbox/diffGeneExp/wtbmbr_wtbother")
library(rmarkdown)
render("wtbmbr_wtbother.Rmd", "pdf_document")
setwd("~/Dropbox/diffGeneExp/wtbmbr_wtbother")
library(rmarkdown)
render("wtbmbr_wtbother.Rmd", "pdf_document")
render("wtbmbr_wtbother.attempt2.Rmd", "pdf_document")
setwd("~/Dropbox/GO_enrichment/wtambr_wtbmbr")
GO Enrichment
-------------
The only things you have to change in this file are:
1.  `sigOnly <- read.csv("inputFile.csv")'  This is where you put your input file. Only significat DE genes.
2. `genes = as.integer(pat$up)` Change this where you specify upregulated, down regulated, or all.
3. `write.table(t, file="DE1_sigonly_up_GOmerge.txt")` This is where you specify the output file name.  Change each time you change the second item.
```{r}
library(goseq)
library(GO.db)
```
Making the table
-----------------
###File Input
Input the output from DE analysis.  This is made for a list that includes only the significant genes.
```{r}
sigOnly <- read.csv("wtambr_wtbmbr_DE.csv") #change this
head(sigOnly)
dim(sigOnly)
colnames(sigOnly)[1] <- "itag"
colnames(sigOnly)
```
###Subset
First I need to subset the list to up or down regulated, then add a new colum that specififys 1.  This column is need to for merging.
```{r}
upITAG <- subset(sigOnly, logFC > 0, select = c(itag))
upITAG$up <- 1
downITAG <- subset(sigOnly, logFC < 0, select = c(itag))
downITAG$down <- 1
allITAG <- subset(sigOnly, select = c(itag))
allITAG$all <- 1
```
###Merge I - with normalized ITAG length gene list
read in guide.
```{r}
geneLength <- read.csv("../normalized_genes_length.csv")
head(geneLength)
#isolate just the gene list
genes <- subset(geneLength, select = c(itag))
```
First merge each table to geneLength
```{r}
upITAGmerge <- merge(genes, upITAG, by = "itag", all= TRUE)
dim(upITAGmerge)
downITAGmerge <- merge(genes, downITAG, by = "itag", all= TRUE)
dim(downITAGmerge)
allITAGmerge <- merge(genes, allITAG, by = "itag", all= TRUE)
dim(allITAGmerge)
head(allITAGmerge)
```
###Merge II - Merge them all together.
```{r}
matrixGOupdown <- merge(upITAGmerge, downITAGmerge, by = "itag", all = TRUE)
head(matrixGOupdown)
matrixGOupdownall <- merge(matrixGOupdown, allITAG, by = "itag", all = TRUE)
head(matrixGOupdownall)
matrixGO <- merge(matrixGOupdownall, geneLength, by = "itag", all = TRUE)
head(matrixGO)
```
###Clean Up
```{r}
matrixGO[is.na(matrixGO)] <- 0
head(matrixGO)
```
This is if you want to write out the table.
write.table(matrixGO, "mydata.txt", sep="\t", quote= FALSE)
Aashish's section
-----------------
The is the input of the GOslim categories.  There are only two columns 1. itag and 2. go
```{r}
pat <- matrixGO
head(pat)
cate <- read.table("../melted.GOTable.txt",header=TRUE)
head(cate)
```
###Subseting for GO analysis
Specify the column you are interested in `pat$all` refers to all the DE gene regardless if they are up or down regulated. If you want to specify down regulated, specify `pat$down`.
```{r}
genes = as.integer(pat$down)
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
```
Here is where you can specify the p-value cut-off
```{r}
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
```
library(rmarkdown)
library(rmarkdown)
setwd("~/Dropbox/diffGeneExp/MDS")
library(edgeR)
counts <- read.delim("sam2countsResults.tsv",row.names=1)
Normexplog<- log(counts,2)
boxplot(Normexplog)
summary(counts)
boxplot(counts)
counts[is.na(counts)] <- 0
colnames(counts)
group <- c(
rep("tf2ambr", 4),
rep("tf2aother", 4),
rep("tf2bmbr", 3),
rep("tf2bother", 5),
rep("tf2cmbr", 4),
rep("tf2cother", 4),
rep("wtambr", 3),
rep("wtaother", 4),
rep("wtbmbr", 4),
rep("wtbother", 4),
rep("wtcmbr", 6),
rep("wtcother", 3)
)
counts <- read.delim("../sam2countsResults.tsv",row.names=1)
Normexplog<- log(counts,2)
boxplot(Normexplog)
head(counts)
summary(counts)
boxplot(counts)
counts[is.na(counts)] <- 0
colnames(counts)
group <- c(
rep("tf2ambr", 4),
rep("tf2aother", 4),
rep("tf2bmbr", 3),
rep("tf2bother", 5),
rep("tf2cmbr", 4),
rep("tf2cother", 4),
rep("wtambr", 3),
rep("wtaother", 4),
rep("wtbmbr", 4),
rep("wtbother", 4),
rep("wtcmbr", 6),
rep("wtcother", 3)
)
d <- DGEList(counts=counts, group=group)
d$samples
cpm.d<- cpm(d)
d <- d[rowSums(cpm.data>10)>=3,]
d <- d[rowSums(cpm.data>10)>=3,]
cpm.d<- cpm(d)
d$samples
cpm.d<- cpm(d)
d <- d[rowSums(cpm.data>10)>=3,]
d <- d[rowSums(cpm.data>10)>=3,]
d <- d[rowSums(cpm.d>10)>=3,]
d <- calcNormFactors(d)
d$pseudo<- equalizeLibSizes(d)
write.csv (d$pseudo$pseudo,"normalized_read_count.csv")
data_norm <- read.csv("normalized_read_count.csv", row.names=1)
dim(data_norm)
Normexplog<- log(data_norm,2)
pdf("boxplot.norm.all.pdf")
boxplot(Normexplog)
head(Normexplog)
dev.off()
library(ggplot2)
m <- cmdscale(dist(scale(t(data_norm))))
colnames(m) <- c("x", "y")
m<-as.data.frame(m)
m$sampleSection <- c(
rep("ambr", 4),
rep("aother", 4),
rep("bmbr", 3),
rep("bother", 5),
rep("cmbr", 4),
rep("cother", 4),
rep("ambr", 3),
rep("aother", 4),
rep("bmbr", 4),
rep("bother", 4),
rep("cmbr", 6),
rep("cother", 3)
)
m$genotype <- c(
rep("tf2", 24),
rep("wt", 24)
)
m$type <- c(
rep("mbr", 4),
rep("other", 4),
rep("mbr", 3),
rep("other", 5),
rep("mbr", 4),
rep("other", 4),
rep("mbr", 3),
rep("other", 4),
rep("mbr", 4),
rep("other", 4),
rep("mbr", 6),
rep("other", 3)
)
ggplot(m, aes(x,y,colour=sampleSection))+geom_point(size=5)+theme_bw()
ggplot(m, aes(x,y,colour=sampleSection))+geom_point(size=5)+theme_bw() + facet_grid(.~ genotype)
ggplot(m, aes(x,y,colour=genotype))+geom_point(size=5)+theme_bw()
ggplot(m, aes(x,y,colour=type, label=sampleSection))+geom_point(size=1)+theme_bw() + geom_text()
ggplot(m, aes(x,y,colour=type, label=sampleSection))+geom_point(size=1)+theme_bw() + geom_text() + facet_grid(. ~ genotype)
ggplot(m, aes(x,y,colour=genotype))+geom_point(size=5)+theme_bw()
ggplot(m, aes(x,y,colour=sampleSection))+geom_point(size=5)+theme_bw() + facet_grid(.~ genotype)
ggplot(m, aes(x,y,colour=sampleSection))+geom_point(size=5)+theme_bw()
ggplot(m, aes(x,y,colour=type, label=sampleSection))+geom_point(size=1)+theme_bw() + geom_text()
ggplot(m, aes(x,y,colour=type, label=sampleSection))+geom_point(size=1)+theme_bw() + geom_text() + facet_grid(. ~ genotype)
ggplot(m, aes(x,y,colour=type, label=sampleSection))+geom_point(size=1)+theme_bw() + geom_text()
library(rmarkdown)
render("MDS.Rmd", "pdf_document")
counts <- read.delim("../sam2countsResults.tsv",row.names=1)
Normexplog<- log(counts,2)
boxplot(Normexplog)
library(rmarkdown)
render("MDS.Rmd", "pdf_document")
render("MDS.Rmd", "pdf_document")
`source("http://bioconductor.org/biocLite.R")`
`biocLite("edgeR")`
setwd("~/Dropbox/diffGeneExp/wtcmbr_wtcother")
library(edgeR)
counts <- read.delim("../sam2countsResults.tsv",row.names=1)
head(counts)
summary(counts)
colnames(counts)
counts[is.na(counts)] <- 0
wtcregion <- counts[,40:48]
head(wtcregion)
group <- c(rep("wtcmbr", 6), rep("wtcother",3))
d <- DGEList(counts=wtcregion,group=group)
d$samples
cpm.d<- cpm(d)
d <- d[rowSums(cpm.d>2)>=3,]
d <- estimateCommonDisp(d,verbose=T)
d <- calcNormFactors(d)
d <- estimateCommonDisp(d)
DEtest <- exactTest(d,pair=c("wtcmbr","wtcother"))
head(DEtest$table)
results <- topTags(DEtest, n=Inf)
head(results)
dim(results$table)
sum(results$table$FDR<.05) # How many are DE genes?
summary(decideTestsDGE(DEtest,p.value=.05))
summary(decideTestsDGE(DEtest, FDR = .05))
summary(decideTestsDGE(DEtest,p.value=.05))
plotSmear(d,de.tags=sig.genes)
sig.genes <- rownames(results$table[results$table$FDR<0.05,])
summary(decideTestsDGE(DEtest,p.value=.05))
summary(decideTestsDGE(DEtest, FDR = .05))
summary(decideTestsDGE(DEtest,p.value=.05))
sig.genes <- rownames(results$table[results$table$FDR<0.05,])
sig.genes <- rownames(results$table[results$table$FDR<0.05,])
sig.genes
sig.genes <- rownames(results$table[results$table$FDR<0.05,])
plotSmear(d,de.tags=sig.genes)
dim(results$table)
sum(results$table$FDR<.05) # How many are DE genes?
dim(results$table)
summary(decideTestsDGE(DEtest,p.value=.05))
